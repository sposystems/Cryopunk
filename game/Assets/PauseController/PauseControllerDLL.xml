<?xml version="1.0"?>
<doc>
    <assembly>
        <name>/Users/Dreyton/Testing Pausing DLL/Assets/PauseController/PauseControllerDLL</name>
    </assembly>
    <members>
        <member name="M:EleckTek.PauseController.GetPauseIntepretor(UnityEngine.Component)">
            <summary>
            Gets the pause intepretor for this component
            </summary>
            <returns>
            The pause intepretor.
            </returns>
            <param name="component">
            The component to interpreter.
            </param>
        </member>
        <member name="M:EleckTek.PauseController.GetPauseIntepretors(System.Collections.Generic.IEnumerable{UnityEngine.Component})">
            <summary>
            Gets the pause intepretors.
            </summary>
            <returns>
            The pause intepretors.
            </returns>
            <param name="components">
            Components to match interpreters.
            </param>
        </member>
        <member name="M:EleckTek.PauseController.GetPauseIntepretors(UnityEngine.GameObject)">
            <summary>
            Gathers very component in the game object and finds the associated interpreter.
            </summary>
            <returns>
            The pause intepretors.
            </returns>
            <param name="game_object">
            Game Object to gather intepretors from.
            </param>
        </member>
        <member name="M:EleckTek.PauseController.GetFilteredPauseProtocols(UnityEngine.GameObject)">
            <summary>
            This is the standard processed used to create a PausingListing in pausing.
            </summary>
            <returns>
            A PausingListing that is tied to this Pause Controller and Intepretors over the components of this object.
            </returns>
            <param name="game_object">
            The target object to have it's components filtered.
            </param>
        </member>
        <member name="M:EleckTek.PauseController.PauseIndividualListing(EleckTek.PauseTypes.PausingListing)">
            <summary>
            Pauses the PausingListing and also produces the message calls for each component.
            </summary>
            <param name="pausing_listing">
            Pausing_listing to be paused.
            </param>
        </member>
        <member name="M:EleckTek.PauseController.UnpauseIndividualListing(EleckTek.PauseTypes.PausingListing)">
            <summary>
            Unpauses the the pausing_listing and also sends resuming messages to components.
            </summary>
            <param name="pausing_listing">
            Pausing_listing.
            </param>
        </member>
        <member name="M:EleckTek.PauseController.InsertPauseInterpreterSuccessful(System.Type,EleckTek.PauseTypes.InterpreterCreationFunction,System.Boolean)">
            <summary>
            This inserts a Interpreter Creation Fuction that's mapped to an object type.  When a interpreter is requested, it'll use function
            that was passed to the function.
            </summary>
            <returns>
            Returns false if the Interpreter Creation Function was not mapped with this type
            </returns>
            <param name="type">
            The Type this function should be mapped to. Hint: use "typeof( YourType )"
            </param>
            <param name="create_funct">
            The creation function.  It should create an instance of the Intepretor and return that to the caller.
            </param>
            <param name="allow_replacing">
            If set to true, you can override the currently mapped function.
            </param>
        </member>
        <member name="M:EleckTek.PauseController.InsertPauseInterpreterSuccessful(System.Type,EleckTek.PauseTypes.InterpreterCreationFunction)">
            <summary>
            This inserts a Interpreter Creation Fuction that's mapped to an object type.  When a interpreter is requested, it'll use function
            that was passed to the function.  This version of the function does not allow for function replacing
            </summary>
            <returns>
            Returns false if the Interpreter Creation Function was not mapped with this type
            </returns>
            <param name="type">
            The Type this function should be mapped to. Hint: use "typeof( YourType )"
            </param>
            <param name="create_funct">
            The creation function.  It should create an instance of the Intepretor and return that to the caller.
            </param>
        </member>
        <member name="M:EleckTek.PauseController.InsertTypePauseBlockerSuccessful(System.Type)">
            <summary>
            This type will be ignored when pausing.
            </summary>
            <returns>
            Returns true if the blocker was sucessful added.
            </returns>
            <param name="type">
            If set to <c>true</c> type.
            </param>
        </member>
        <member name="M:EleckTek.PauseController.RemoveTypePauseBlockerSuccessful(System.Type)">
            <summary>
            Removes the type pause blocker.
            </summary>
            <returns>
            Returns true of blocker successful was removed. If false, then this type isn't currently assigned for blocking
            </returns>
            <param name="type">
            If set to <c>true</c> type.
            </param>
        </member>
        <member name="M:EleckTek.PauseController.LateUpdate">
            <summary>
            Update checks to see if the activatePause bool has been switch
            </summary>/</member>
        <member name="M:EleckTek.PauseController.ActivatePauseProtocol">
            <summary>
            Activates pause on all objects in the scene
            </summary>
        </member>
        <member name="M:EleckTek.PauseController.DeactivatePauseProtocol">
            <summary>
            Deactivates pause on all objects in the scene
            </summary>
        </member>
        <member name="M:PauseCustomFilter.ShouldFilterThisObject(UnityEngine.GameObject,EleckTek.PauseController,UnityEngine.Object)">
            <summary>
            This program turns a list of behaviours that should be register to the assigned "pause" or "dont pause" list
            </summary>
            <returns>
            A list of behaviours to register
            </returns>
            <param name="gameObj">
            The currently GameObject in the index
            </param>
            <param name="pause_controller">
            Pause_controller.
            </param>
            <param name="object_data">
            Object_data.
            </param>
        </member>
        <member name="M:PauseCustomFilter.FilterBehaviour(UnityEngine.Component,EleckTek.PauseController,UnityEngine.Object)">
            <summary>
            Should this component get an PauseIntepretor
            </summary>
            <returns>
            The behaviour.
            </returns>
            <param name="component">
            If set to <c>true</c> component.
            </param>
            <param name="pause_controller">
            If set to <c>true</c> pause_controller.
            </param>
            <param name="object_data">
            If set to <c>true</c> object_data.
            </param>
        </member>
        <member name="M:EleckTek.PauseTypes.IPauseProtocolInterpreter.ShouldPause">
            <summary>
            Should this component get a PauseIntepretor
            </summary>
            <returns>
            True if it should pause
            </returns>
        </member>
        <member name="M:EleckTek.PauseTypes.IPauseProtocolInterpreter.Pause">
            <summary>
            Pause the component ;
            </summary>
        </member>
        <member name="M:EleckTek.PauseTypes.IPauseProtocolInterpreter.Unpause">
            <summary>
            Unpause the component
            </summary>
        </member>
        <member name="M:EleckTek.PauseTypes.IPauseProtocolInterpreter.SendMessage(System.String,EleckTek.PauseTypes.PauseMessageParameter,UnityEngine.SendMessageOptions)">
            <summary>
            Sends the message.
            </summary>
            <param name="message">
            Message.
            </param>
            <param name="parameter">
            Parameter.
            </param>
            <param name="options">
            Options.
            </param>
        </member>
        <member name="M:EleckTek.PauseTypes.IPauseProtocolInterpreter.IsValid">
            <summary>
            Determines whether this instance is valid.
            </summary>
            <returns>
                <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EleckTek.PauseTypes.IPauseProtocolInterpreter.GetName">
            <summary>
            Gets the name.
            </summary>
            <returns>
            The name.
            </returns>
        </member>
        <member name="T:EleckTek.PauseTypes.DummyPauseInterpreter">
            <summary>
            This object contains does nothing wihen it's methods is called unless there's a simple value return expected.
            </summary>
        </member>
        <member name="T:EleckTek.PauseTypes.PausingListing">
            <summary>
            This contains a list of PauseInterpreters that will control a selected GameObject
            </summary>
        </member>
        <member name="P:EleckTek.PauseTypes.PausingListing.SelectedList">
            <summary>
            Gets the selected list set by "SetSelectedList"
            </summary>
            <value>
            The selected list.
            </value>
        </member>
        <member name="M:EleckTek.PauseTypes.PausingListing.SetSelectedList(EleckTek.PauseTypes.PauseInclusion)">
            <summary>
            This selects a particular list that is use in conjunction with "SelectedList"
            </summary>
            <returns>
            The list associated with this PauseInclusion value
            </returns>
            <param name="inclusion">
            Pause Inclusion
            </param>
        </member>
        <member name="M:EleckTek.PauseTypes.PausingListing.RefreshPauseList">
            <summary>
            Resorts which components should be paused.
            </summary>
        </member>
        <member name="M:EleckTek.PauseTypes.PausingListing.Pause">
            <summary>
            Pauses selected GameObject components.
            </summary>
        </member>
        <member name="M:EleckTek.PauseTypes.PausingListing.Unpause">
            <summary>
            Unpause selected GameObject components.
            </summary>
        </member>
    </members>
</doc>
